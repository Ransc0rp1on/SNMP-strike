#!/bin/bash
# core/vulnerability.sh
# Authors: ransc0rp1on & 6umi1029

source ../lib/terminal.sh

# Function to check for known vulnerabilities
check_snmp_vulnerabilities() {
    local target=$1
    local community=$2
    local version=$3
    
    draw_header "VULNERABILITY CHECKS"
    info_msg "Target: $target | Community: $community"
    
    # Initialize results
    local vulnerabilities=0
    
    # 1. Check for default community strings
    echo -e "\n${BLUE}[+] Checking default community strings${NC}"
    local default_strings=("public" "private" "manager" "admin" "snmp" "cisco")
    
    for string in "${default_strings[@]}"; do
        if [ "$community" = "$string" ]; then
            warning_msg "DEFAULT COMMUNITY STRING: $string"
            echo "  Risk: Allows unauthorized access to SNMP data"
            ((vulnerabilities++))
        fi
    done
    
    # 2. Check SNMP version
    echo -e "\n${BLUE}[+] Checking SNMP version${NC}"
    if [ "$version" = "1" ]; then
        warning_msg "SNMPv1 IN USE"
        echo "  Risk: No encryption, vulnerable to spoofing and information disclosure"
        ((vulnerabilities++))
    fi
    
    # 3. Check for write access
    echo -e "\n${BLUE}[+] Checking write access${NC}"
    source ../core/enumerator.sh
    if test_write_access "$target" "$community" "$version"; then
        warning_msg "WRITE ACCESS ENABLED"
        echo "  Risk: Allows modification of system configuration"
        ((vulnerabilities++))
    fi
    
    # 4. Check for known CVEs
    echo -e "\n${BLUE}[+] Checking for known CVEs${NC}"
    check_known_cves "$target" "$community" "$version"
    
    # Summary
    echo -e "\n${YELLOW}=== VULNERABILITY SUMMARY ===${NC}"
    if [ "$vulnerabilities" -eq 0 ]; then
        success_msg "No critical vulnerabilities detected"
    else
        warning_msg "Detected $vulnerabilities potential vulnerabilities"
    fi
}

# Function to check for specific CVEs
check_known_cves() {
    local target=$1
    local community=$2
    local version=$3
    
    # Try to get system description
    local sysdescr=$(snmpget -v "$version" -c "$community" "$target" sysDescr.0 2>/dev/null)
    
    # Check for Cisco devices
    if echo "$sysdescr" | grep -qi "cisco"; then
        echo "  Detected Cisco device"
        
        # CVE-2017-6742: Cisco SNMP RCE
        echo "  Checking for CVE-2017-6742 (Cisco SNMP RCE)"
        local cisco_oid="1.3.6.1.4.1.9.9.491.1.3.3.1.1.5"
        local result=$(snmpwalk -v "$version" -c "$community" "$target" "$cisco_oid" 2>/dev/null)
        
        if [ -n "$result" ]; then
            warning_msg "POTENTIALLY VULNERABLE TO CVE-2017-6742"
            echo "  Cisco IOS SNMP Remote Code Execution Vulnerability"
        fi
    fi
    
    # Check for Net-SNMP
    if echo "$sysdescr" | grep -qi "net-snmp"; then
        echo "  Detected Net-SNMP implementation"
        
        # CVE-2022-24806: Net-SNMP Double Free
        echo "  Checking for CVE-2022-24806 (Net-SNMP Double Free)"
        local netsnmp_oid="1.3.6.1.2.1.1.9.1.3"
        local result=$(snmpwalk -v "$version" -c "$community" "$target" "$netsnmp_oid" 2>/dev/null)
        
        if [ -n "$result" ]; then
            warning_msg "POTENTIALLY VULNERABLE TO CVE-2022-24806"
            echo "  Net-SNMP before 5.9.2 Double Free Vulnerability"
        fi
    fi
    
    # Check for Juniper devices
    if echo "$sysdescr" | grep -qi "junos"; then
        echo "  Detected Juniper device"
        
        # CVE-2014-6385: Juniper SNMP Denial of Service
        echo "  Checking for CVE-2014-6385 (Juniper SNMP DoS)"
        local juniper_oid="1.3.6.1.4.1.2636.3.1.13"
        local result=$(snmpwalk -v "$version" -c "$community" "$target" "$juniper_oid" 2>/dev/null)
        
        if [ -n "$result" ]; then
            warning_msg "POTENTIALLY VULNERABLE TO CVE-2014-6385"
            echo "  Juniper SNMP Denial of Service Vulnerability"
        fi
    fi
    
    # Generic check for SNMPv3 support
    if [ "$version" != "3" ]; then
        echo "  Checking for SNMPv3 support"
        if snmpwalk -v 3 -c "$community" "$target" sysDescr.0 >/dev/null 2>&1; then
            success_msg "SNMPv3 supported"
        else
            warning_msg "SNMPv3 NOT SUPPORTED"
            echo "  Risk: Using less secure SNMPv1 or v2c"
        fi
    fi
}